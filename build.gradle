apply plugin: 'java'
apply plugin: 'idea'

version = "0.0.1"

repositories {
    jcenter()
    maven {
        url  "http://dl.bintray.com/crate/crate"
    }
}

ext {
    crate_version = '0.49.0'
    downloadDir = new File(rootDir, 'downloads')
}

configurations {
    dependency
    compile.extendsFrom dependency
}

dependencies {
    compile "io.crate:crate:$crate_version"
    dependency 'net.rtme:classnamerj:0.0.1'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile ('junit:junit:4.11') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

// crate local installation tasks required by integration tests
def download (String url, String name){
    downloadDir.mkdirs()
    def dest = new File(downloadDir, name)
    ant.get(
            src: url,
            verbose: true,
            usetimestamp: true,
            skipexisting: true,
            dest: dest
    )
    return dest;
}

def extractTopFolder(File src, String trg){
    // delete target folder. Otherwise old files will stick around and lead to strange errors
    new File(trg).delete()

    copy {
        includeEmptyDirs = false
        FileTree ft
        if(src.name.endsWith('.zip')) {
            ft = zipTree(src)
        }
        if(src.name.endsWith('.tar.gz')) {
            ft = tarTree(src)
        }
        from(ft) {
            eachFile { details ->
                details.path =
                        details.path.substring(details.relativePath.segments[0].length())
            }
        }
        into trg
    }
}

task downloadCrateRelease << {
    def dest = download(
            "https://cdn.crate.io/downloads/releases/crate-${crate_version}.tar.gz",
            "crate-${crate_version}.tar.gz")
    extractTopFolder(dest, 'parts/crate')
}

task deleteCrateDownloadFolder(type: Delete) {
    delete "${project.rootDir}/parts/crate"
}

task jarIncludingDependencies(type: Jar) {
    from configurations.dependency.collect {
        it.isDirectory() ? it : zipTree(it).matching{
            exclude 'META-INF/**'
        }
    }
    from sourceSets.main.output
    doLast {
        manifest {
            attributes("Implementation-Title": "Example Crate.io plugin", "Implementation-Version": project.version)
        }
    }
}

task copyJarToCrateClasspath(type: Copy, dependsOn: [jarIncludingDependencies, downloadCrateRelease]) {
    from(jar)
    into "${project.rootDir}/parts/crate/lib"
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
    outputs.upToDateWhen { false }

    dependsOn downloadCrateRelease
    dependsOn copyJarToCrateClasspath
}

clean {
    dependsOn deleteCrateDownloadFolder
}


